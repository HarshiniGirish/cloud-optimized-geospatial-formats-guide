---
title: FlatGeobuf in JavaScript
subtitle: Example of using FlatGeobuf with Leaflet
---

FlatGeobuf is a cloud-native vector data format because it contains a built-in spatial index that allows reading a specific spatial region from within the file without downloading the entire file's content.

This is very useful from browser applications, because

This is an example of using FlatGeobuf with cloud-native spatial filtering in JavaScript.

## Streaming vs Filtering

FlatGeobuf is amenable to two different manners of getting the data into the browser.

Streaming is ...

Filtering is ...


## Example

Load the FlatGeobuf JavaScript library:

```{ojs}
flatgeobuf = require("flatgeobuf@3.26.2/dist/flatgeobuf-geojson.min.js")
```

This library has two functions: `deserialize` to fetch a remote file and parse it to GeoJSON, and `serialize`, which converts GeoJSON to FlatGeobuf.

```{ojs}
flatgeobuf
```

For this demo, we'll use the same data source as in the [FlatGeobuf leaflet example](https://flatgeobuf.org/examples/leaflet/large.html). This data file represents every census block in the USA.

```{ojs}
url = 'https://flatgeobuf.septima.dk/population_areas.fgb'
```

The above is a really big file at 12GB total size, so we don't want to fetch the entire file. In this demo, we'll choose a small bounding box representing an area over Manhattan in New York City.

Beware: if you make this bounding box too big, FlatGeobuf will try to download a large amount of data into your browser and maybe crash the tab!

```{ojs}
bbox = {
    return {
        minX: -74.003802,
        minY: 40.725756,
        maxX: -73.981481,
        maxY: 40.744008,
    }
}
```

```{ojs}
// leaflet uses lat-lon ordering I think
bboxObjectToArray = (obj) => [[obj.minY, obj.minX], [obj.maxY, obj.maxX]]
```

Render the rectangle to the Leaflet map

```{ojs}
rectangle = L.rectangle(bboxObjectToArray(bbox), { interactive: false, color: "blue", fillOpacity: 0.0, opacity: 1.0 }).addTo(map);
```

Update map:
```{ojs}
console.log('hi')
// {
//     // let previousResults = L.layerGroup().addTo(map);

//     // remove the old results
//     // previousResults.remove();
//     const nextResults = L.layerGroup().addTo(map);
//     // previousResults = nextResults;

//     const colorScale = ((d) => {
//         return d > 750 ? '#800026' :
//             d > 500 ? '#BD0026' :
//             d > 250  ? '#E31A1C' :
//             d > 100 ? '#FC4E2A' :
//             d > 50   ? '#FD8D3C' :
//             d > 25  ? '#FEB24C' :
//             d > 10   ? '#FED976' :
//             '#FFEDA0'
//     });

//     console.log(iter);
//     const iter = flatgeobuf.deserialize(url, bbox);
//     for await (const feature of iter) {
//         // Leaflet styling
//         const defaultStyle = {
//             color: colorScale(feature.properties["population"]),
//             weight: 1,
//             fillOpacity: 0.4,
//         };
//         L.geoJSON(feature, {
//             style: defaultStyle,
//         }).on({
//             'mouseover': function(e) {
//                 const layer = e.target;
//                 layer.setStyle({
//                     weight: 4,
//                     fillOpacity: 0.8,
//                 });
//             },
//             'mouseout': function(e) {
//                 const layer = e.target;
//                 layer.setStyle(defaultStyle);
//             }
//         }).bindPopup(`${feature.properties["population"]} people live in this census block.</h1>`)
//         .addTo(nextResults);
//     }
// }
```

Instantiate the Leaflet map and include a default OSM tile layer.

```{ojs}
map = {
  const container = html`<div style="height:600px;">`;
  yield container;
  const map = L.map(container).setView([40.7299, -73.9923], 13);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "&copy; <a href=https://www.openstreetmap.org/copyright>OpenStreetMap</a> contributors"
  }).addTo(map);
}
```

Load the Leaflet JavaScript library and fetch its CSS styling defintions if needed.

```{ojs}
L = {
  const L = await require("leaflet@1/dist/leaflet.js");
  if (!L._style) {
    const href = await require.resolve("leaflet@1/dist/leaflet.css");
    document.head.appendChild(L._style = html`<link href=${href} rel=stylesheet>`);
  }
  return L;
}
```

### References

This notebook is an amalgam of several resources

- FlatGeobuf example
- [`@bjornharrtell/streaming-flatgeobuf`](https://observablehq.com/@bjornharrtell/streaming-flatgeobuf) is a useful related resource for an example of a streaming load of FlatGeobuf.
- [`@observablehq/hello-leaflet`](https://observablehq.com/@observablehq/hello-leaflet) for an example of loading and rendering a Leaflet map using Observable.
-
