---
title: PMTiles
subtitle: Guidelines for PMTiles
---

# PMTiles

PMTiles is a single-file archive format for tiled data, usually used for visualization.

## Analytical vs tiled data formats

To understand PMTiles, it's important to understand the difference between "analytical" data and "tiled" data. Analytical data refers to data in its original form, without any modifications to geometry. Tiled data formats apply a variety of modifications to geometries, including clipping and simplification, to save space and make it faster to visualize.

![](../images/analytical_vs_tiled_geoms.png)

Consider the above diagram. In an analytical format, every coordinate of the complex polygon would be included in the file. In a tiled format, the geometry would be split up into every tile it intersects, and possibly simplified as well.

The analytical format is more useful for operations like a spatial join, because the entire geometry is available. It's harder to perform such analyses on tiled data because a program must:

- Know which other tiles contain part of this polygon
- Fetch each of those tiles
- Assemble the dissected geometries back into a single geometry
- Apply the desired operation

The tiled format is more useful for visualization because a user who wants to visualize a small area only needs to download a few tiles. Additionally loading the data is faster because of simplification. It's slower to visualize analytical data because the entire shape with all coordinates must be loaded, even if visualizing only a small area.

Thus analytical and visualization formats strive for different goals.

## Cloud-native

PMTiles is designed to be a cloud-native file format: used directly from a client over a network via HTTP range requests, without having a server in the middle.

PMTiles is

To understand the benefit of PMTiles, it's necessary to understand some background.

Mapbox was the first open source tool to heavily rely on tiled vector data.

PMTiles can be used for any format of data, as long as it's tiled. It's used most often with vector data, but can also be used with e.g. raster data or terrain mesh data.

## Internal format

PMTiles has a file header, one or more metadata regions, and a region of tile data.

The header is fixed length, located at the beginning of the file, and includes necessary information to decode the rest of the file accurately.

PMTiles includes _directories_, or regions of bytes with metadata about tiles. It's important for each directory to remain small, so while there will always be at least one directory, larger PMTiles archives with many tiles may include more than one directory.

At the end of the file is the tile data. This includes all data for all the tiles in the archive.

The full specification is defined [here](https://github.com/protomaps/PMTiles/blob/main/spec/v3/spec.md).

### Hilbert-oriented tiles

Interally, tiles are oriented along a Hilbert Curve. This means that tiles that are spatially near each other are also located near each other in the file structure.

This is especially appropriate for PMTiles because visualization purposes most often request data within a specific geographic area. Because spatially-nearby tiles are likely to be nearby in the file as well, this allows the PMTiles client to merge multiple requests for tiles into one larger request, rather than needing to fetch a different area of the file for each tile.

## Multiple resolution

PMTiles archives support storing a full XYZ pyramid of tile data. This means that you can store multiple zoom levels of data inside a single file.

## Internal compression

PMTiles allows tiles to be stored in the file with compression.

## Generating PMTiles

The easiest way to generate PMTiles for vector data is through the [tippecanoe](https://github.com/felt/tippecanoe) tool. This will generate vector tiles that are ideal for visualization, removing small features at low zoom levels to keep tiles a manageable size.

## Alternatives

### PMTiles

The most common alternative for PMTiles is [MBTiles](https://github.com/mapbox/mbtiles-spec), which was in many ways the precursor to PMTiles. MBTiles stores the included vector tiles in a table in a SQLite database. This has the benefit of being much easier to use than manually managing millions of tiny, individual files, but has the downside of not being serverless. In general, it's impossible to read from a SQLite database without fetching the entire file's content. This meant that frontend clients like a web browser couldn't fetch tiles directly using range requests, but rather a server has to be running to fetch tiles from the MBTiles file.

### Saving individual files to cloud storage

It's also possible to upload the bare tiled data directly to cloud storage as individual files.

This has significant downsides of needing to manage many millions of tiny individual files. This is also much slower to manage, as uploading millions of files to a cloud storage provider such as S3 can take hours. And on S3 it costs $5 per million files added to an S3 bucket. So if a PMTiles archive included 10 million files, it would cost $50 just to upload those files, compared to 5-millionths of a cent to upload the PMTiles file.
