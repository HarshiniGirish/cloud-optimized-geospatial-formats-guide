---
title: "Cloud-Optimized Geospatial Formats Guide"
subtitle: "Methods for Generating and Testing Cloud-Optimized Geospatial Formats"
---

If you wish to provide optimized access to geospatial data, this guide is for you. Given the large and growing size of geospatial data, users can no longer rely solely on file download to achieve their science goals.

## Built for the community, by the community.

There is no one-size-fits-all approach to cloud-optimized data, but the community has developed many tools for creating and assessing geospatial formats that should be organized and shared.

With this guide, we provide the landscape of cloud-optimized geospatial formats and provide the best-known answers to common questions.

## How to get involved

If you want to contribute or modify content, read the [Get Involved](./contributing.qmd) page.

If you have a question or idea for this guide, please start a [Github Discussion](https://github.com/developmentseed/cloud-optimized-geospatial-formats-guide/discussions/new/choose).

## The opportunity

Just putting data on the cloud does not solve the big geospatial data problem. Users cannot reasonably wait to download, store and work with large files on their machines. To have access to data in memory, large volumes of data must be available via subsetting methods.

While it is possible to provide subsetting as a service, this requires maintanence of additional servers and network latency (data has to go to the server where the subsetting service is running and then to the user). With cloud-optimized formats and the appropriate libraries, subsets of data can be accessed remotely without the introduction of an additional server.

Regardless, users will be accessing data over a network, which must be considered when designing the cloud-optimized format. Traditional geospatial formats are optimized for on-disk access via small internal chunks. The introduction of a network introduces latency and the number of requests must considered.

As a community, we have arrived at the following **cloud-optimized format pattern:**

1. Metadata includes addresses for data blocks.
2. Metadata is stored in a consistent format and location.
3. Metadata can be read once.
3. Metadata can be used to read the underlying file format which supports subsetted access via adressable chunks, internal tiling or both.

These characteristics allow for parallelized and partial reading.

## Data Type to Traditional to Cloud-Optimized Geospatial File Format Table

The diagram below depicts how some of the cloud-optimized formats discussed in this guide are cloud-optimized formats of traditional geospatial file formats.

![Cloud-Optimized Geospatial Formats](./images/cogeo-formats-table.png)

Notes:

* Some data formats cover multiple data types, specifically:
    * GeoJSON can be used for both vector and point data.
    * HDF5 can be used for point data or data cubes (or both via groups).
    * GeoParquet and FlatGeobuf can be used for vector data or point data.
* LAS files are intended for 3D points, not 2D points (since COPC files are compressed LAS files, same goes for COPC files).
* [TopoJSON](https://github.com/topojson/topojson) (an extension of GeoJSON that encodes topology) and [newline-delimited GeoJSON](https://stevage.github.io/ndgeojson/) are types of GeoJSON worth mentioning but not explicitly represented in the diagram.
* GeoTIFF and GeoParquet are geospatial versions of the non-geospatial file formats TIFF and Parquet, respectively. FlatGeobuf builds upon the non-geospatial [flatbuffers](https://github.com/google/flatbuffers) serialization library (though flatbuffers is not a standalone file format)

## Table of Contents

1. [Overview of Formats (slideshow)](./overview.qmd)
2. Formats
   a. [Cloud-Optimized GeoTIFFs](./cloud-optimized-geotiffs/intro.ipynb)
   b. [Zarr](./zarr/intro.qmd)
   c. [Kerchunk](./kerchunk/intro.qmd)
   c. [Cloud-Optimized NetCDF4/HDF5](./cloud-optimized-netcdf4-hdf5/index.qmd)
   d. [GeoParquet](./geoparquet/index.qmd)
   e. [FlatGeobuf](./flatgeobuf/index.qmd)
3. [Cookbooks](./cookbooks/index.qmd)

## Authors

* Aimee Barciauskas
* Alex Mandel
* Kyle Barron
* [Overview Slide](./overview.qmd) credits: Vincent Sarago, Chris Holmes, Patrick Quinn, Matt Hanson, Ryan Abernathey

## Questions to ask when generating cloud-optimized geospatial data in any format

1. What variable(s) should be included in the new data format?
2. Will you create copies to optimize for different needs?
3. What is the intended use case or usage profile? Will this product be used for visualization, analysis or both?
4. What is the expected access method?
5. How much of your data is typically rendered or selected at once?


